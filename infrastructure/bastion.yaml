Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    MinClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 1

    MaxClusterSize:
        Description: Maximum number of ECS hosts to deploy
        Type: Number
        Default: 1

    KeyName:
        Description: Key pair name for ssh access
        Type: String

    DesiredClusterSize:
        Description: Desired number of ECS hosts for initial deploy
        Type: Number
        Default: 1

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: CommaDelimitedList

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

Mappings:

    # These are the latest ECS optimized AMIs as of February 2017:
    #
    #   amzn-ami-2016.09.f-amazon-ecs-optimized
    #   ECS agent:    1.14.0
    #   Docker:       1.12.6
    #   ecs-init:     1.14.0-2
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-b2df2ca4
        us-east-2:
            AMI: ami-832b0ee6
        us-west-1:
            AMI: ami-dd104dbd
        us-west-2:
            AMI: ami-022b9262
        eu-west-1:
            AMI: ami-a7f2acc1
        eu-west-2:
            AMI: ami-3fb6bc5b
        eu-central-1:
            AMI: ami-ec2be583
        ap-northeast-1:
            AMI: ami-c393d6a4
        ap-southeast-1:
            AMI: ami-a88530cb
        ap-southeast-2:
            AMI: ami-8af8ffe9
        ca-central-1:
            AMI: ami-ead5688e

Resources:

    BastionAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref BastionLaunchConfiguration
            MinSize: !Ref MinClusterSize
            MaxSize: !Ref MaxClusterSize
            DesiredCapacity: !Ref DesiredClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Bastion host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Count: !Ref MinClusterSize
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT20M
                WaitOnResourceSignals: true
    ClusterSimpleScaleUpPolicy:
        Type: "AWS::AutoScaling::ScalingPolicy"
        Properties:
            AdjustmentType: "ChangeInCapacity"
            PolicyType: "SimpleScaling"
            Cooldown: "60"
            AutoScalingGroupName: !Ref BastionAutoScalingGroup
            ScalingAdjustment: 1

    BastionLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            AssociatePublicIpAddress: true
            SecurityGroups:
                - !Ref SecurityGroup
            KeyName: !Ref KeyName
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    sleep 10
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionAutoScalingGroup

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionLaunchConfiguration

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
